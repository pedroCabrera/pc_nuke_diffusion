# CMakeLists.txt modifications for HDR VAE decode support
# Add these modifications to your existing CMakeLists.txt

# HDR VAE decode is now header-only - no library needed
set(HDR_VAE_HEADERS
    hdr_vae_decode.hpp
)

# Create interface library for header-only HDR VAE decode
add_library(hdr_vae_decode INTERFACE)

target_include_directories(hdr_vae_decode INTERFACE
    ${CMAKE_CURRENT_SOURCE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/packages/stable-diffusion.cpp
)

# Set C++ standard requirement for HDR features
target_compile_features(hdr_vae_decode INTERFACE cxx_std_17)

# Add HDR example executable
add_executable(hdr_vae_example hdr_vae_example.cpp)

target_link_libraries(hdr_vae_example 
    hdr_vae_decode
    stable-diffusion
    ${CMAKE_THREAD_LIBS_INIT}
)

# Set C++ standard for the example
set_target_properties(hdr_vae_example PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
)

# Link HDR VAE decode interface library to your executables
# This provides the header-only HDR functionality:

# For sd.exe
target_link_libraries(sd PRIVATE hdr_vae_decode)

# For pc_sd_inference.exe  
target_link_libraries(pc_sd_inference PRIVATE hdr_vae_decode)

# Add HDR support to any other executables that need VAE decode
# target_link_libraries(your_executable PRIVATE hdr_vae_decode)

# Add preprocessor definitions for HDR support
add_compile_definitions(
    HDR_VAE_DECODE_ENABLED=1
    HDR_VAE_FLUX_OPTIMIZED=1
)

# Optional: Add OpenEXR support for HDR image I/O
find_package(OpenEXR QUIET)
if(OpenEXR_FOUND)
    target_link_libraries(hdr_vae_decode INTERFACE ${OpenEXR_LIBRARIES})
    target_include_directories(hdr_vae_decode INTERFACE ${OpenEXR_INCLUDE_DIRS})
    target_compile_definitions(hdr_vae_decode INTERFACE HDR_VAE_OPENEXR_SUPPORT=1)
    message(STATUS "HDR VAE: OpenEXR support enabled")
else()
    message(WARNING "HDR VAE: OpenEXR not found, HDR image I/O will be limited")
endif()

# Add compiler-specific optimizations for HDR processing
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(hdr_vae_decode INTERFACE 
        -O3 
        -ffast-math 
        -march=native
    )
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    target_compile_options(hdr_vae_decode INTERFACE 
        /O2 
        /fp:fast 
        /arch:AVX2
    )
endif()

# Install HDR headers for external use
install(FILES 
    hdr_vae_decode.hpp
    DESTINATION include
)

# Install interface library
install(TARGETS hdr_vae_decode
    EXPORT hdr_vae_decode-targets
)

install(EXPORT hdr_vae_decode-targets
    DESTINATION lib/cmake/hdr_vae_decode
)

# Add HDR VAE decode tests (optional)
if(BUILD_TESTING)
    add_executable(test_hdr_vae_decode test_hdr_vae_decode.cpp)
    target_link_libraries(test_hdr_vae_decode 
        hdr_vae_decode
        stable-diffusion
    )
    add_test(NAME hdr_vae_decode_test COMMAND test_hdr_vae_decode)
endif()

# Print configuration summary
message(STATUS "HDR VAE Decode Configuration:")
message(STATUS "  - HDR VAE decode: ENABLED")
message(STATUS "  - Flux optimizations: ENABLED") 
message(STATUS "  - OpenEXR support: ${OpenEXR_FOUND}")
message(STATUS "  - C++ standard: ${CMAKE_CXX_STANDARD}")

# Add custom target for HDR documentation
add_custom_target(hdr_docs
    COMMAND echo "Building HDR VAE decode documentation..."
    COMMAND echo "HDR VAE decode provides extended dynamic range support for stable-diffusion.cpp"
    COMMAND echo "Supported modes: Conservative, Moderate, Exposure, Aggressive"
    COMMAND echo "Optimized for Flux models and professional VFX workflows"
    VERBATIM
)